// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fb

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type AddArc struct {
	_tab flatbuffers.Table
}

func GetRootAsAddArc(buf []byte, offset flatbuffers.UOffsetT) *AddArc {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AddArc{}
	x.Init(buf, n+offset)
	return x
}

func FinishAddArcBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsAddArc(buf []byte, offset flatbuffers.UOffsetT) *AddArc {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &AddArc{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedAddArcBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *AddArc) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AddArc) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *AddArc) X() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *AddArc) MutateX(n float64) bool {
	return rcv._tab.MutateFloat64Slot(4, n)
}

func (rcv *AddArc) Y() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *AddArc) MutateY(n float64) bool {
	return rcv._tab.MutateFloat64Slot(6, n)
}

func (rcv *AddArc) Radius() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *AddArc) MutateRadius(n float64) bool {
	return rcv._tab.MutateFloat64Slot(8, n)
}

func (rcv *AddArc) StartAngle() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *AddArc) MutateStartAngle(n float64) bool {
	return rcv._tab.MutateFloat64Slot(10, n)
}

func (rcv *AddArc) EndAngle() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *AddArc) MutateEndAngle(n float64) bool {
	return rcv._tab.MutateFloat64Slot(12, n)
}

func AddArcStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func AddArcAddX(builder *flatbuffers.Builder, x float64) {
	builder.PrependFloat64Slot(0, x, 0.0)
}
func AddArcAddY(builder *flatbuffers.Builder, y float64) {
	builder.PrependFloat64Slot(1, y, 0.0)
}
func AddArcAddRadius(builder *flatbuffers.Builder, radius float64) {
	builder.PrependFloat64Slot(2, radius, 0.0)
}
func AddArcAddStartAngle(builder *flatbuffers.Builder, startAngle float64) {
	builder.PrependFloat64Slot(3, startAngle, 0.0)
}
func AddArcAddEndAngle(builder *flatbuffers.Builder, endAngle float64) {
	builder.PrependFloat64Slot(4, endAngle, 0.0)
}
func AddArcEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
