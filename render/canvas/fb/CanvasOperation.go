// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fb

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type CanvasOperation struct {
	_tab flatbuffers.Table
}

func GetRootAsCanvasOperation(buf []byte, offset flatbuffers.UOffsetT) *CanvasOperation {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &CanvasOperation{}
	x.Init(buf, n+offset)
	return x
}

func FinishCanvasOperationBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsCanvasOperation(buf []byte, offset flatbuffers.UOffsetT) *CanvasOperation {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &CanvasOperation{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedCanvasOperationBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *CanvasOperation) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *CanvasOperation) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *CanvasOperation) AddArc(obj *AddArc) *AddArc {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(AddArc)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *CanvasOperation) AddCircle(obj *AddCircle) *AddCircle {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(AddCircle)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *CanvasOperation) AddLineTo(obj *AddLineTo) *AddLineTo {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(AddLineTo)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *CanvasOperation) AddRectangle(obj *AddRectangle) *AddRectangle {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(AddRectangle)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *CanvasOperation) Clear(obj *Clear) *Clear {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Clear)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *CanvasOperation) ClipRectangle(obj *ClipRectangle) *ClipRectangle {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(ClipRectangle)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *CanvasOperation) DrawImage(obj *DrawImage) *DrawImage {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(DrawImage)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *CanvasOperation) DrawPixel(obj *DrawPixel) *DrawPixel {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(DrawPixel)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *CanvasOperation) DrawString(obj *DrawString) *DrawString {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(DrawString)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *CanvasOperation) DrawStringWrapped(obj *DrawStringWrapped) *DrawStringWrapped {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(DrawStringWrapped)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *CanvasOperation) FillPath(obj *FillPath) *FillPath {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(FillPath)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *CanvasOperation) Pop(obj *Pop) *Pop {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Pop)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *CanvasOperation) Push(obj *Push) *Push {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Push)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *CanvasOperation) Rotate(obj *Rotate) *Rotate {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Rotate)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *CanvasOperation) Scale(obj *Scale) *Scale {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Scale)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *CanvasOperation) SetColor(obj *SetColor) *SetColor {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(SetColor)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *CanvasOperation) SetFontFace(obj *SetFontFace) *SetFontFace {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(SetFontFace)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *CanvasOperation) Translate(obj *Translate) *Translate {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Translate)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func CanvasOperationStart(builder *flatbuffers.Builder) {
	builder.StartObject(18)
}
func CanvasOperationAddAddArc(builder *flatbuffers.Builder, addArc flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(addArc), 0)
}
func CanvasOperationAddAddCircle(builder *flatbuffers.Builder, addCircle flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(addCircle), 0)
}
func CanvasOperationAddAddLineTo(builder *flatbuffers.Builder, addLineTo flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(addLineTo), 0)
}
func CanvasOperationAddAddRectangle(builder *flatbuffers.Builder, addRectangle flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(addRectangle), 0)
}
func CanvasOperationAddClear(builder *flatbuffers.Builder, clear flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(clear), 0)
}
func CanvasOperationAddClipRectangle(builder *flatbuffers.Builder, clipRectangle flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(clipRectangle), 0)
}
func CanvasOperationAddDrawImage(builder *flatbuffers.Builder, drawImage flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(drawImage), 0)
}
func CanvasOperationAddDrawPixel(builder *flatbuffers.Builder, drawPixel flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(drawPixel), 0)
}
func CanvasOperationAddDrawString(builder *flatbuffers.Builder, drawString flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(drawString), 0)
}
func CanvasOperationAddDrawStringWrapped(builder *flatbuffers.Builder, drawStringWrapped flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(drawStringWrapped), 0)
}
func CanvasOperationAddFillPath(builder *flatbuffers.Builder, fillPath flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(fillPath), 0)
}
func CanvasOperationAddPop(builder *flatbuffers.Builder, pop flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(pop), 0)
}
func CanvasOperationAddPush(builder *flatbuffers.Builder, push flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(12, flatbuffers.UOffsetT(push), 0)
}
func CanvasOperationAddRotate(builder *flatbuffers.Builder, rotate flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(13, flatbuffers.UOffsetT(rotate), 0)
}
func CanvasOperationAddScale(builder *flatbuffers.Builder, scale flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(14, flatbuffers.UOffsetT(scale), 0)
}
func CanvasOperationAddSetColor(builder *flatbuffers.Builder, setColor flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(15, flatbuffers.UOffsetT(setColor), 0)
}
func CanvasOperationAddSetFontFace(builder *flatbuffers.Builder, setFontFace flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(16, flatbuffers.UOffsetT(setFontFace), 0)
}
func CanvasOperationAddTranslate(builder *flatbuffers.Builder, translate flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(17, flatbuffers.UOffsetT(translate), 0)
}
func CanvasOperationEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
