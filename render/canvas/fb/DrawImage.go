// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fb

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type DrawImage struct {
	_tab flatbuffers.Table
}

func GetRootAsDrawImage(buf []byte, offset flatbuffers.UOffsetT) *DrawImage {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &DrawImage{}
	x.Init(buf, n+offset)
	return x
}

func FinishDrawImageBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsDrawImage(buf []byte, offset flatbuffers.UOffsetT) *DrawImage {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &DrawImage{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedDrawImageBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *DrawImage) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *DrawImage) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *DrawImage) Image(obj *Image) *Image {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Image)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *DrawImage) X() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *DrawImage) MutateX(n float64) bool {
	return rcv._tab.MutateFloat64Slot(6, n)
}

func (rcv *DrawImage) Y() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *DrawImage) MutateY(n float64) bool {
	return rcv._tab.MutateFloat64Slot(8, n)
}

func (rcv *DrawImage) Width() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *DrawImage) MutateWidth(n float64) bool {
	return rcv._tab.MutateFloat64Slot(10, n)
}

func (rcv *DrawImage) Height() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *DrawImage) MutateHeight(n float64) bool {
	return rcv._tab.MutateFloat64Slot(12, n)
}

func DrawImageStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func DrawImageAddImage(builder *flatbuffers.Builder, image flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(image), 0)
}
func DrawImageAddX(builder *flatbuffers.Builder, x float64) {
	builder.PrependFloat64Slot(1, x, 0.0)
}
func DrawImageAddY(builder *flatbuffers.Builder, y float64) {
	builder.PrependFloat64Slot(2, y, 0.0)
}
func DrawImageAddWidth(builder *flatbuffers.Builder, width float64) {
	builder.PrependFloat64Slot(3, width, 0.0)
}
func DrawImageAddHeight(builder *flatbuffers.Builder, height float64) {
	builder.PrependFloat64Slot(4, height, 0.0)
}
func DrawImageEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
