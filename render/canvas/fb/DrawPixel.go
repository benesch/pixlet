// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fb

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type DrawPixel struct {
	_tab flatbuffers.Table
}

func GetRootAsDrawPixel(buf []byte, offset flatbuffers.UOffsetT) *DrawPixel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &DrawPixel{}
	x.Init(buf, n+offset)
	return x
}

func FinishDrawPixelBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsDrawPixel(buf []byte, offset flatbuffers.UOffsetT) *DrawPixel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &DrawPixel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedDrawPixelBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *DrawPixel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *DrawPixel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *DrawPixel) X() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *DrawPixel) MutateX(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

func (rcv *DrawPixel) Y() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *DrawPixel) MutateY(n int32) bool {
	return rcv._tab.MutateInt32Slot(6, n)
}

func DrawPixelStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func DrawPixelAddX(builder *flatbuffers.Builder, x int32) {
	builder.PrependInt32Slot(0, x, 0)
}
func DrawPixelAddY(builder *flatbuffers.Builder, y int32) {
	builder.PrependInt32Slot(1, y, 0)
}
func DrawPixelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
