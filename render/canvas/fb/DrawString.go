// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fb

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type DrawString struct {
	_tab flatbuffers.Table
}

func GetRootAsDrawString(buf []byte, offset flatbuffers.UOffsetT) *DrawString {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &DrawString{}
	x.Init(buf, n+offset)
	return x
}

func FinishDrawStringBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsDrawString(buf []byte, offset flatbuffers.UOffsetT) *DrawString {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &DrawString{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedDrawStringBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *DrawString) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *DrawString) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *DrawString) Text() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *DrawString) X() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *DrawString) MutateX(n float64) bool {
	return rcv._tab.MutateFloat64Slot(6, n)
}

func (rcv *DrawString) Y() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *DrawString) MutateY(n float64) bool {
	return rcv._tab.MutateFloat64Slot(8, n)
}

func (rcv *DrawString) Align() Align {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return Align(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *DrawString) MutateAlign(n Align) bool {
	return rcv._tab.MutateInt32Slot(10, int32(n))
}

func DrawStringStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func DrawStringAddText(builder *flatbuffers.Builder, text flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(text), 0)
}
func DrawStringAddX(builder *flatbuffers.Builder, x float64) {
	builder.PrependFloat64Slot(1, x, 0.0)
}
func DrawStringAddY(builder *flatbuffers.Builder, y float64) {
	builder.PrependFloat64Slot(2, y, 0.0)
}
func DrawStringAddAlign(builder *flatbuffers.Builder, align Align) {
	builder.PrependInt32Slot(3, int32(align), 0)
}
func DrawStringEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
