// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fb

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type DrawStringWrapped struct {
	_tab flatbuffers.Table
}

func GetRootAsDrawStringWrapped(buf []byte, offset flatbuffers.UOffsetT) *DrawStringWrapped {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &DrawStringWrapped{}
	x.Init(buf, n+offset)
	return x
}

func FinishDrawStringWrappedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsDrawStringWrapped(buf []byte, offset flatbuffers.UOffsetT) *DrawStringWrapped {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &DrawStringWrapped{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedDrawStringWrappedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *DrawStringWrapped) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *DrawStringWrapped) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *DrawStringWrapped) Text() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *DrawStringWrapped) X() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *DrawStringWrapped) MutateX(n float64) bool {
	return rcv._tab.MutateFloat64Slot(6, n)
}

func (rcv *DrawStringWrapped) Y() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *DrawStringWrapped) MutateY(n float64) bool {
	return rcv._tab.MutateFloat64Slot(8, n)
}

func (rcv *DrawStringWrapped) Width() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *DrawStringWrapped) MutateWidth(n float64) bool {
	return rcv._tab.MutateFloat64Slot(10, n)
}

func (rcv *DrawStringWrapped) Spacing() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *DrawStringWrapped) MutateSpacing(n float64) bool {
	return rcv._tab.MutateFloat64Slot(12, n)
}

func (rcv *DrawStringWrapped) Align() Align {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return Align(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *DrawStringWrapped) MutateAlign(n Align) bool {
	return rcv._tab.MutateInt32Slot(14, int32(n))
}

func DrawStringWrappedStart(builder *flatbuffers.Builder) {
	builder.StartObject(6)
}
func DrawStringWrappedAddText(builder *flatbuffers.Builder, text flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(text), 0)
}
func DrawStringWrappedAddX(builder *flatbuffers.Builder, x float64) {
	builder.PrependFloat64Slot(1, x, 0.0)
}
func DrawStringWrappedAddY(builder *flatbuffers.Builder, y float64) {
	builder.PrependFloat64Slot(2, y, 0.0)
}
func DrawStringWrappedAddWidth(builder *flatbuffers.Builder, width float64) {
	builder.PrependFloat64Slot(3, width, 0.0)
}
func DrawStringWrappedAddSpacing(builder *flatbuffers.Builder, spacing float64) {
	builder.PrependFloat64Slot(4, spacing, 0.0)
}
func DrawStringWrappedAddAlign(builder *flatbuffers.Builder, align Align) {
	builder.PrependInt32Slot(5, int32(align), 0)
}
func DrawStringWrappedEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
