// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fb

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type FontFace struct {
	_tab flatbuffers.Table
}

func GetRootAsFontFace(buf []byte, offset flatbuffers.UOffsetT) *FontFace {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &FontFace{}
	x.Init(buf, n+offset)
	return x
}

func FinishFontFaceBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsFontFace(buf []byte, offset flatbuffers.UOffsetT) *FontFace {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &FontFace{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedFontFaceBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *FontFace) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *FontFace) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *FontFace) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *FontFace) Size() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *FontFace) MutateSize(n int32) bool {
	return rcv._tab.MutateInt32Slot(6, n)
}

func FontFaceStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func FontFaceAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(name), 0)
}
func FontFaceAddSize(builder *flatbuffers.Builder, size int32) {
	builder.PrependInt32Slot(1, size, 0)
}
func FontFaceEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
